// rf69 demo tx rx.pde
// -*- mode: C++ -*-
// Example sketch showing how to create a simple messageing client
// with the RH_RF69 class. RH_RF69 class does not provide for addressing or
// reliability, so you should only use RH_RF69  if you do not need the higher
// level messaging abilities.
// It is designed to work with the other example rf69_server.
// Demonstrates the use of AES encryption, setting the frequency and modem 
// configuration

#include <SPI.h>
#include <RH_RF69.h>

/************ Radio Setup ***************/

// Change to 434.0 or other frequency, must match RX's freq!
#define RF69_FREQ 915.0

#if defined (__AVR_ATmega32U4__) // Feather 32u4 w/Radio
  #define RFM69_CS      8
  #define RFM69_INT     7
  #define RFM69_RST     4
  #define LED           13
#endif

#if defined(ADAFRUIT_FEATHER_M0) // Feather M0 w/Radio
  #define RFM69_CS      8
  #define RFM69_INT     3
  #define RFM69_RST     4
  #define LED           13
#endif

#if defined (__AVR_ATmega328P__)  // Feather 328P w/wing
  #define RFM69_INT     3  // 
  #define RFM69_CS      4  //
  #define RFM69_RST     2  // "A"
  #define LED           13
#endif

#if defined(ESP8266)    // ESP8266 feather w/wing
  #define RFM69_CS      2    // "E"
  #define RFM69_IRQ     15   // "B"
  #define RFM69_RST     16   // "D"
  #define LED           0
#endif

#if defined(ESP32)    // ESP32 feather w/wing
  #define RFM69_RST     13   // same as LED
  #define RFM69_CS      33   // "B"
  #define RFM69_INT     27   // "A"
  #define LED           13
#endif

/* Teensy 3.x w/wing
#define RFM69_RST     9   // "A"
#define RFM69_CS      10   // "B"
#define RFM69_IRQ     4    // "C"
#define RFM69_IRQN    digitalPinToInterrupt(RFM69_IRQ )
*/
 
/* WICED Feather w/wing 
#define RFM69_RST     PA4     // "A"
#define RFM69_CS      PB4     // "B"
#define RFM69_IRQ     PA15    // "C"
#define RFM69_IRQN    RFM69_IRQ
*/

// Singleton instance of the radio driver
RH_RF69 rf69(RFM69_CS, RFM69_INT);

int16_t packetnum = 0;  // packet counter, we increment per xmission
int Highbit_port, Midbit_port, Lowbit_port;
int Highbit_star, Midbit_star, Lowbit_star;
int calibrate;

void setup() 
{
  Serial.begin(115200);
  //while (!Serial) { delay(1); } // wait until serial console is open, remove if not tethered to computer

  pinMode(LED, OUTPUT);     
  pinMode(RFM69_RST, OUTPUT);
  digitalWrite(RFM69_RST, LOW);

  Serial.println("Feather RFM69 TX Test!");
  Serial.println();

  // manual reset
  digitalWrite(RFM69_RST, HIGH);
  delay(10);
  digitalWrite(RFM69_RST, LOW);
  delay(10);
  
  if (!rf69.init()) {
    Serial.println("RFM69 radio init failed");
    while (1);
  }
  Serial.println("RFM69 radio init OK!");
  // Defaults after init are 434.0MHz, modulation GFSK_Rb250Fd250, +13dbM (for low power module)
  // No encryption
  if (!rf69.setFrequency(RF69_FREQ)) {
    Serial.println("setFrequency failed");
  }

  // If you are using a high power RF69 eg RFM69HW, you *must* set a Tx power with the
  // ishighpowermodule flag set like this:
  rf69.setTxPower(20, true);  // range from 14-20 for power, 2nd arg must be true for 69HCW

  // The encryption key has to be the same as the one in the server
  uint8_t key[] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
  rf69.setEncryptionKey(key);
  
  pinMode(LED, OUTPUT);
  pinMode(8, INPUT);
  pinMode(9, INPUT);

  Serial.print("RFM69 radio @");  Serial.print((int)RF69_FREQ);  Serial.println(" MHz");
}



void loop() {
  delay(1000);  // Wait 1 second between transmits, could also 'sleep' here!

  //char radiopacket[20] = "Hello World #";
  //itoa(packetnum++, radiopacket+13, 10);
  //WHERE TO FIX INPUTTED PACKETS
  char radiopacket[6];
  long statevalue;
  
  //six i/o from the pic for each hand and locations
  //States
  // UP - 000
  // Down - 001
  // Left - 010
  // Right - 011
  // None - 100
  //char radiopacket[20] = "Hello World #";
  //itoa(packetnum++, radiopacket+13, 10);
  /**
  int MSB, four, three, two, one, LSB;
  // insert calibration values
  //conversion to state dependent on inputed values
  if((MSB&&(!four)&&(!three)) && (two&&(!one)&&(!LSB))) //Port=None Star=None
    statevalue = 0b00000;
  else if(((!MSB)&&(four)&&(!three)) && (two&&(!one)&&(!LSB))) // Port=Left Star=None
    statevalue = 0b00001;
  else if(!(MSB&&four&&three) && (two&&(!one)&&(!LSB))) // Port=Up Star=None
    statevalue = 0b00010;
  else if(((!MSB)&&four&&three)&& (two&&(!one)&&(!LSB))) //Port=Right Star=None
    statevalue = 0b00100;
  else if(((!MSB)&&four&&three)&& (two&&(!one)&&(!LSB))) //Port=Down Star=None
    statevalue = 0b00100;
  else 
    statevalue = 0b10000;
    **/
    
  int port_up = 0, port_down = 0, port_left = 0, port_right = 0, port_none = 0;
  int star_up = 0, star_down = 0, star_left = 0, star_right = 0, star_none = 0;
  
  //itoa(packetnum++, radiopacket+13, 10);
  Highbit_port = digitalRead(A5);
  Midbit_port = digitalRead(A4);
  Lowbit_port = digitalRead(A3);
  Highbit_star = digitalRead(A2);
  Midbit_star = digitalRead(A1);
  Lowbit_star = digitalRead(A0);
  calibrate = digitalRead(9);
  // UP - 000
  // Down - 001
  // Left - 010
  // Right - 011
  // None - 100
  if(Highbit_port){ //port = 100
    port_none = 1;
    //radiopacket = "Port: NONE"
  }
  else{
    if(Midbit_port){ //port = 01X
      if(Lowbit_port){ //port = 011
        port_right = 1;
        //radiopacket = "Port: RIGHT";
      }
      else{
        port_left = 1; //port = 010
        //radiopacket = "Port: LEFT"
      }
    }
    else{ //port = 00X
      if(Lowbit_port) { //port = 001
        port_down = 1;
        //radiopacket = "Port: DOWN";
      }
      else { //port = 000
        port_up = 1;
        //radiopacket = "Port: UP";
      }
    }
  }

  if(Highbit_star){ //star = 100
    star_none = 1;
    //radiopacket = "Starboard: NONE"
  }
  else{//star = 0XX
    if(Midbit_star){ //star = 01X 
      if(Lowbit_star){ //star = 011
        star_right = 1;
        //radiopacket = "Starboard: RIGHT"
      }
      else { //star = 010
        star_left = 1;
        //radiopacket = "Starboard: LEFT"
      }
    }
    else{ //star = 00X
      if(Lowbit_star){ //star = 001
        star_down = 1;
        //radiopacket = "Port: DOWN";
      }
      else { //star = 000
        star_up = 1;
        //radiopacket = "Port: UP";
      }
    }
  }

  if(port_none & star_none) statevalue = 0;
  else if(port_left & star_none) statevalue = 1;
  else if(port_up & star_none) statevalue = 2;
  else if(port_right & star_none) statevalue = 3;
  else if(port_down & star_none) statevalue = 4;

  else if(port_none & star_left) statevalue = 5;
  else if(port_left & star_left) statevalue = 6;
  else if(port_up & star_left) statevalue = 7;
  else if(port_right & star_left) statevalue = 8;
  else if(port_down & star_left) statevalue = 9;

  else if(port_none & star_up) statevalue = 10;
  else if(port_left & star_up) statevalue = 11;
  else if(port_up & star_up) statevalue = 12;
  else if(port_right & star_up) statevalue = 13;
  else if(port_down & star_up) statevalue = 14;

  else if(port_none & star_right) statevalue = 15;
  else if(port_left & star_right) statevalue = 16;
  else if(port_up & star_right) statevalue = 17;
  else if(port_right & star_right) statevalue = 18;
  else if(port_down & star_right) statevalue = 19;
  
  else if(port_none & star_down) statevalue = 20;
  else if(port_left & star_down) statevalue = 21;
  else if(port_up & star_down) statevalue = 22;
  else if(port_right & star_down) statevalue = 23;
  else if(port_down & star_down) statevalue = 24;

  else statevalue = 31;
    
  //this is an easy failure point
  Serial.print(statevalue);
  itoa(statevalue, radiopacket, 10);
  Serial.print("Sending "); Serial.println(radiopacket);
  
  // Send a message!
  rf69.send((uint8_t *)radiopacket, strlen(radiopacket));
  rf69.waitPacketSent();

  // Now wait for a reply
  uint8_t buf[5];
  uint8_t len = sizeof(buf);

  if (rf69.waitAvailableTimeout(500))  { 
    // Should be a reply message for us now   
    if (rf69.recv(buf, &len)) {
      Serial.print("Got a reply: ");
      Serial.println((char*)buf);
      Blink(LED, 50, 3); //blink LED 3 times, 50ms between blinks
    } else {
      Serial.println("Receive failed");
    }
  } 
}

void Blink(byte PIN, byte DELAY_MS, byte loops) {
  for (byte i=0; i<loops; i++)  {
    digitalWrite(PIN,HIGH);
    delay(DELAY_MS);
    digitalWrite(PIN,LOW);
    delay(DELAY_MS);
  }
}
